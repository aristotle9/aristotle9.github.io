<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[aristotle9's Blog]]></title>
  <link href="http://blog.mukio.org/atom.xml" rel="self"/>
  <link href="http://blog.mukio.org/"/>
  <updated>2016-08-21T19:29:45+08:00</updated>
  <id>http://blog.mukio.org/</id>
  <author>
    <name><![CDATA[aristotle9]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://blog.mukio.org/blog/2016/08/20/hello-world/"/>
    <updated>2016-08-20T12:23:58+08:00</updated>
    <id>http://blog.mukio.org/blog/2016/08/20/hello-world</id>
    <content type="html"><![CDATA[<p>各种我用过一段时间的 <del>GPL</del> 语言的 hello world 程序。</p>

<!-- more -->


<h3>按时间排列</h3>

<p>C</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">puts</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Java</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;hello world&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>JavaScript</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>C++</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;hello world&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>ActionScript3.0</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='actionscript'><span class='line'><span class="nf">trace</span><span class="p">(</span><span class="s2">&quot;hello world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">print</span> <span class="s">&quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Lua</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lua'><span class='line'><span class="nb">print</span><span class="p">(</span><span class="s2">&quot;</span><span class="s">hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>PHP</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="s2">&quot;hello world&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Haskell</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">putStrLn</span> <span class="s2">&quot;hello world&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Clojure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">println </span><span class="s">&quot;hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Kotlin</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">println</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Rust</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rust'><span class='line'><span class="nb">println</span><span class="o">!</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Swift</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='swift'><span class='line'><span class="n">println</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Github做静态网站服务器]]></title>
    <link href="http://blog.mukio.org/blog/2015/06/06/use-github-page/"/>
    <updated>2015-06-06T20:00:00+08:00</updated>
    <id>http://blog.mukio.org/blog/2015/06/06/use-github-page</id>
    <content type="html"><![CDATA[<p>年初换了一台虚拟主机，但是没有把博客网站重新配置好。一拖又过了大半年时间。</p>

<p>近来想起应该分享一些想法，于是想起来要重新搭建一个博客站点。中途想试试新的静态网站生成工具。在 <a href="https://www.staticgen.com/">StaticGen</a> 上看到一个列表，其中 <a href="http://hexo.io/">Hexo</a> 看起来是个比较流行的 JavaScript 静态网站生成工具。下午就试用了一下。</p>

<!-- more -->


<p>之后发现 Hexo 一个挺不符合使用习惯的地方：POST 的 md 源文件与内使用的图片资源组织结构与之前 <a href="https://github.com/jnordberg/wintersmith">Wintersmith</a> 并不一样。最终折腾了几下又换回来了。然而不得不感叹 Hexo 模板的丰富是 Wintersmith 不能比的。所以之后自己又自行改了一下 css 样式，让原来的网站看起来不是很丑。</p>

<p>言归正传，选择 Github 寄放博客网站的原因是方便。</p>

<p><a href="https://help.github.com/categories/github-pages-basics/">Github Pages</a> 为每个用户，用户的每个项目都保留了一个静态页面站点。这些静态站点资源是通过 git 来部署的。个人站点需要在 github 上建立一个 <code>用户名.github.io</code> 的 repo，然后把相关文件 push 到 master 分支上。
通过 <code>https://用户名.github.io/</code> 访问。项目的站点是在相应的项目库中建立一个 gh-pages 分支，然后将其中的源代码等文件清空，并把网站文件加进去，通过 <code>https://用户名.github.io/项目名</code> 来访问。</p>

<p>个人站可以绑定个人域名，通过 CNAME 映射过去。同时要在根目录下放一个 CNAME 文件，其中写上个人域名地址，以便验证和授权。</p>

<p>所以，这跟以前用 ftp 上传文件没有什么区别。</p>

<p>现在，这个博客网站就是一个 Github Pages 站点，并且绑定了个人域名。 <a href="https://aristotle9.github.io/">https://aristotle9.github.io/</a> 和 <a href="http://blog.mukio.org/">http://blog.mukio.org/</a> 都能访问。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[舰娘之混淆代码分析]]></title>
    <link href="http://blog.mukio.org/blog/2014/08/11/remove-kancolle-obfus/"/>
    <updated>2014-08-11T21:20:00+08:00</updated>
    <id>http://blog.mukio.org/blog/2014/08/11/remove-kancolle-obfus</id>
    <content type="html"><![CDATA[<h3>kancolle-worker</h3>

<p>玩舰娘后，曾用 <a href="http://clojure.org/">Clojure</a> 写过一个自动远征的程序 <a href="https://github.com/aristotle9/kancolle-worker">kancolle-worker</a>。</p>

<p>这个程序在 Clojure 的 REPL 中提供主要的舰娘 api 及基本的游戏逻辑模型，懂 Clojure 的人很容易写出一个自动远征程序。</p>

<h3>api_port 参数</h3>

<p>后来舰娘的主要 api 添加了一个校验参数: api_port ，用于屏蔽第三方挂机程序。该参数的生成算法是混淆过的，不易阅读。如果要继续使用外挂程序，就必须疏理一下诸如下面这种代码，然后用其他语言实现。</p>

<!-- more -->


<h3>正则混淆</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;.&quot;</span><span class="p">)(</span><span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s2">&quot;...$&quot;</span><span class="p">)(</span><span class="o">~</span><span class="p">(</span><span class="o">~</span><span class="p">[][{}]</span> <span class="o">&lt;&lt;</span> <span class="o">~</span><span class="p">[][{}])))</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是一段表示字符串 <code>"6"</code> 的代码。通过观察上面的表达式，发现其中所有的项都是常量，那么表达式的结果也应该是个常量。进一步分析各个表达式。
<code>[][{}]</code> 为 <code>null</code>，<code>~null</code> 为 <code>-1</code>，<code>-1 &lt;&lt; -1</code> 为 <code>-2147483648</code>，<code>~(-2147483648)</code> 为 <code>2147483647</code>，<code>(new RegExp("...$")(2147483647)</code> 为 <code>"647"</code> （转换成字符串后取末尾3个字符），<code>new RegExp(".")("647")</code> 为 <code>"6"</code> (取第一个字符)。</p>

<p>这种常量混淆形式比较新颖。</p>

<h3>常量折叠</h3>

<p>自从 Air SDK 从 Flex 编译工具中独立出来后，添加了许多功能。其中就有一个基本的常量折叠功能。常量折叠就是把代码中的常量表达式替换为表达式的最终结果，这样就省去了运行时的计算，对程序的运行效率有所提升。比如 <code>var a:int = 1 + 1;</code> 编译后与 <code>var a:int = 2;</code> 一样。我试过用 Air SDK 重新编译上面的表达式，发现没有被折叠。原因可能是上面的常量混淆利用了 as3语言的一些隐式的类型转换，以及空数组与空对象、正则表达式的的特性，超出了编译器的常量判定能力。</p>

<p>有个简便的方法可以计算表达式 <code>~(~[][{}] &lt;&lt; ~[][{}])</code> 的结果。就是打开 Chrome 的 JS console, 运行上面的代码。正则表达式直接匹配则是 as3 语言的特性，JS 无法运行。<code>/./"234"</code> 在 as3中 是合理的表达式，结果是 <code>"2"</code>，在 JS 中是错误的式子。</p>

<h3>解析程序</h3>

<p>为了快速得到混淆前的代码，我编写了这个 <a href="http://blog.mukio.org/images/posts/2014-08-11-remove-kancolle-obfus/demo.swf">Flash</a> 程序，它可以将舰娘的混淆代码简化。使用效果如图：</p>

<p><img src="http://blog.mukio.org/images/posts/2014-08-11-remove-kancolle-obfus/image1.png" alt="常量折叠功能演示" /></p>

<p>图中的常量是部分上周舰娘的代码。</p>

<p>除此以外，舰娘的另一类代码混淆是将简单的运算符替换成函数调用。比如将 <code>x + y</code> 替换成 <code>k.a(x, y)</code>。这种方法与上面的混淆方法共同使用，产生的代码极难阅读。所以我写的 Flash 代码分析工具加入了表达式重新打印功能。效果如图:</p>

<p><img src="http://blog.mukio.org/images/posts/2014-08-11-remove-kancolle-obfus/image2.png" alt="代码重新打印功能演示" /></p>

<p>图中的代码是部分上周舰娘的代码。它将常量折叠，并且将函数调用替换成 S-表达式，与 Clojure 的代码相差无几。</p>

<p>Flash 程序是用编译器生成工具所写，主要源码在附录。</p>

<p>它的主要目的在于分析舰娘中混淆的代码并转换为可读形式，所以并不是一个完整的语言。所涉及的运算符仅限于混淆代码使用的运行符。为了方便，正则表达式的调用写入了语法中。常量表达式与变量表达式在生成式中就分开了（ <code>Expr</code> 与 <code>VExpr</code> ）。最后，纠正了某 Flash 反编译工具导出的代码的一个运行符优先级问题。</p>

<p>有了这个工具，加密后的算法会更快分析出来，自动远征程序又可以愉快地运行了。同时说一句：外挂有风险，使用需要谨慎。</p>

<h4>附1：工具使用方法</h4>

<ol>
<li>从舰娘主程中分离出 Core.swf</li>
<li>用工具反编译出 api_port 类</li>
<li>使用我的工具分析其算法</li>
</ol>


<h4>附2：词法、语法源码</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="o">/**</span>
</span><span class='line'><span class="n">js</span> <span class="n">tokens</span>
</span><span class='line'><span class="o">**/</span>
</span><span class='line'><span class="nv">%lex</span>
</span><span class='line'>
</span><span class='line'><span class="nv">%class</span> <span class="n">JsLexer</span>
</span><span class='line'><span class="nv">%package</span> <span class="n">org</span><span class="o">.</span><span class="n">lala</span><span class="o">.</span><span class="n">gen</span>
</span><span class='line'>
</span><span class='line'><span class="nv">%%</span>
</span><span class='line'><span class="err">[</span> <span class="err">\</span><span class="nv">r</span><span class="o">\</span><span class="n">n</span><span class="o">\</span><span class="n">t</span><span class="p">]</span>            <span class="sr">/* skip whitespace */</span>
</span><span class='line'>
</span><span class='line'><span class="mi">0</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="n">a</span><span class="o">-</span><span class="n">fA</span><span class="o">-</span><span class="n">F</span><span class="p">]</span><span class="o">+</span>      <span class="vg">$$</span> <span class="o">=</span> <span class="n">parseInt</span><span class="p">(</span><span class="vg">$$</span><span class="p">);</span> <span class="k">return</span> <span class="s">&quot;hex&quot;</span><span class="p">;</span>
</span><span class='line'><span class="o">\</span><span class="n">d</span><span class="o">+</span>      <span class="vg">$$</span> <span class="o">=</span> <span class="n">parseInt</span><span class="p">(</span><span class="vg">$$</span><span class="p">);</span> <span class="k">return</span> <span class="s">&#39;int&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">new</span>     <span class="k">return</span> <span class="s">&#39;new&#39;</span>
</span><span class='line'><span class="n">RegExp</span>  <span class="k">return</span> <span class="s">&#39;RegExp&#39;</span>
</span><span class='line'><span class="p">[</span><span class="n">a</span><span class="o">-</span><span class="n">zA</span><span class="o">-</span><span class="n">Z_</span><span class="vg">$@</span><span class="p">][</span><span class="o">\</span><span class="n">w_</span><span class="vg">$@</span><span class="p">]</span><span class="o">*</span> <span class="k">return</span> <span class="s">&#39;id&#39;</span>
</span><span class='line'><span class="s">&#39;[^&#39;</span><span class="p">]</span><span class="o">*</span><span class="s">&#39;|&quot;[^&quot;]*&quot; $$ = $$.substr(1, yyleng - 2); return &#39;</span><span class="n">string</span><span class="s">&#39;;</span>
</span><span class='line'>
</span><span class='line'><span class="s">/** flowing with div **/</span>
</span><span class='line'><span class="s">)     return &#39;</span><span class="p">)</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">]     return &#39;</span><span class="p">]</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">}     return &#39;</span><span class="p">}</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">~     return &#39;</span><span class="o">~</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s">false $$ = false; return &#39;</span><span class="n">boolean</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">true  $$ = true; return &#39;</span><span class="n">boolean</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">null  $$ = null; return &#39;</span><span class="n">null</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s">/** flowing with regexp **/</span>
</span><span class='line'><span class="s">&amp;     return &#39;</span><span class="o">&amp;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">\(        return &#39;</span><span class="p">(</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">*     return &#39;</span><span class="o">*</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">+     return &#39;</span><span class="o">+</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">,     return &#39;</span><span class="p">,</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">-     return &#39;</span><span class="o">-</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">\.        return &#39;</span><span class="o">.</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">/     return &#39;</span><span class="o">/</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">;     </span>
</span><span class='line'><span class="s">\&lt;&lt;     return &#39;</span><span class="o">&lt;&lt;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">=     </span>
</span><span class='line'><span class="s">&gt;&gt;      return &#39;</span><span class="o">&gt;&gt;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">&gt;&gt;&gt;      return &#39;</span><span class="o">&gt;&gt;&gt;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">\[        return &#39;</span><span class="p">[</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">{     return &#39;</span><span class="p">{</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">|     return &#39;</span><span class="o">|</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s">/** div **/</span>
</span><span class='line'><span class="s">[_$a-zA-Z][_$a-zA-Z0-9]*  return &#39;</span><span class="n">id</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s">.     return &#39;</span><span class="n">other</span><span class="s">&#39;;</span>
</span><span class='line'>
</span><span class='line'><span class="s">%%</span>
</span><span class='line'>
</span><span class='line'><span class="s">/lex</span>
</span><span class='line'>
</span><span class='line'><span class="s">%class JsParser</span>
</span><span class='line'><span class="s">%package org.lala.gen</span>
</span><span class='line'><span class="s">/* %import org.lala.gen.JsLexer */</span>
</span><span class='line'><span class="s">%lexer_name org.lala.gen.JsLexer</span>
</span><span class='line'>
</span><span class='line'><span class="s">%start VExpr</span>
</span><span class='line'>
</span><span class='line'><span class="s">%left &#39;</span><span class="p">,</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="o">|</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="o">&amp;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="o">&lt;&lt;</span><span class="s">&#39; &#39;</span><span class="o">&gt;&gt;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="o">&gt;&gt;&gt;</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="o">+</span><span class="s">&#39; &#39;</span><span class="o">-</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="o">*</span><span class="s">&#39; &#39;</span><span class="o">/</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="o">~</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="k">new</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%left &#39;</span><span class="p">(</span><span class="s">&#39; &#39;</span><span class="p">[</span><span class="s">&#39; &#39;</span><span class="p">]</span><span class="s">&#39; &#39;</span><span class="p">{</span><span class="s">&#39; &#39;</span><span class="p">}</span><span class="s">&#39;</span>
</span><span class='line'><span class="s">%right &#39;</span><span class="p">)</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="s">%%</span>
</span><span class='line'><span class="s">VExpr /* 变量表式 */</span>
</span><span class='line'><span class="s">  : Expr %prec new</span>
</span><span class='line'><span class="s">  | id &#39;</span><span class="o">.</span><span class="s">&#39; id &#39;</span><span class="p">(</span><span class="s">&#39; ArgList &#39;</span><span class="p">)</span><span class="s">&#39; { $$ = [&#39;</span><span class="n">mcall</span><span class="s">&#39;, $1, $3, $5]; }</span>
</span><span class='line'><span class="s">  | id &#39;</span><span class="p">(</span><span class="s">&#39; ArgList &#39;</span><span class="p">)</span><span class="s">&#39; { $$ = [&#39;</span><span class="n">call</span><span class="s">&#39;, $1, $3]; }</span>
</span><span class='line'><span class="s">  | id</span>
</span><span class='line'><span class="s">  | &#39;</span><span class="p">(</span><span class="s">&#39; VExpr &#39;</span><span class="p">)</span><span class="s">&#39; { $$ = $2; }</span>
</span><span class='line'><span class="s">  | VExpr &#39;</span><span class="p">[</span><span class="s">&#39; VExpr &#39;</span><span class="p">]</span><span class="s">&#39; { $$ = [&#39;</span><span class="nb">index</span><span class="s">&#39;, $1, $3]; }</span>
</span><span class='line'><span class="s">  ;</span>
</span><span class='line'>
</span><span class='line'><span class="s">ArgList</span>
</span><span class='line'><span class="s">  : { $$ = []; }</span>
</span><span class='line'><span class="s">  | VExpr { $$ = [$1]; }</span>
</span><span class='line'><span class="s">  | ArgList &#39;</span><span class="p">,</span><span class="s">&#39; VExpr { $1.push($3); $$ = $1; }</span>
</span><span class='line'><span class="s">  ;</span>
</span><span class='line'>
</span><span class='line'><span class="s">Expr /* 常量表达式 */</span>
</span><span class='line'><span class="s">  : Number { $$ = $1; }</span>
</span><span class='line'><span class="s">  | &#39;</span><span class="p">(</span><span class="s">&#39; Expr &#39;</span><span class="p">)</span><span class="s">&#39; { $$ = $2; }</span>
</span><span class='line'><span class="s">  | Expr &#39;</span><span class="o">+</span><span class="s">&#39; Expr { $$ = $1 + $3; }</span>
</span><span class='line'><span class="s">  | Expr &#39;</span><span class="o">|</span><span class="s">&#39; Expr { $$ = $1 | $3; }</span>
</span><span class='line'><span class="s">  | Expr &#39;</span><span class="o">&amp;</span><span class="s">&#39; Expr { $$ = $1 &amp; $3; }</span>
</span><span class='line'><span class="s">  | Expr &#39;</span><span class="o">-</span><span class="s">&#39; Expr { $$ = $1 - $3; }</span>
</span><span class='line'><span class="s">  | Expr &#39;</span><span class="o">*</span><span class="s">&#39; Expr { $$ = $1 * $3; }</span>
</span><span class='line'><span class="s">  | Expr &#39;</span><span class="sr">/&#39; Expr { $$ = $1 /</span> <span class="nv">$3</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Expr</span> <span class="s">&#39;&lt;&lt;&#39;</span> <span class="n">Expr</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="nv">$1</span> <span class="o">&lt;&lt;</span> <span class="nv">$3</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Expr</span> <span class="s">&#39;&gt;&gt;&#39;</span> <span class="n">Expr</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="nv">$1</span> <span class="o">&gt;&gt;</span> <span class="nv">$3</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Expr</span> <span class="s">&#39;&gt;&gt;&gt;&#39;</span> <span class="n">Expr</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="nv">$1</span> <span class="o">&gt;&gt;&gt;</span> <span class="nv">$3</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="s">&#39;~&#39;</span> <span class="n">Expr</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="o">~</span><span class="nv">$2</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="s">&#39;-&#39;</span> <span class="n">Expr</span> <span class="nv">%prec</span> <span class="s">&#39;~&#39;</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="o">-</span><span class="nv">$2</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Array</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Expr</span> <span class="s">&#39;[&#39;</span> <span class="n">Expr</span> <span class="s">&#39;]&#39;</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="nv">$1</span><span class="p">[</span><span class="nv">$3</span><span class="p">];</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="s">&#39;{&#39;</span> <span class="s">&#39;}&#39;</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="p">{};</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">new</span> <span class="s">&#39;RegExp&#39;</span> <span class="s">&#39;(&#39;</span> <span class="n">string</span> <span class="s">&#39;)&#39;</span> <span class="n">Expr</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="n">Number</span><span class="p">(</span><span class="n">String</span><span class="p">(</span><span class="nv">$6</span><span class="p">)</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="k">new</span> <span class="n">RegExp</span><span class="p">(</span><span class="nv">$4</span><span class="p">))[</span><span class="mi">0</span><span class="p">]);</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Array</span>
</span><span class='line'>  <span class="p">:</span> <span class="s">&#39;[&#39;</span> <span class="n">ArrayList</span> <span class="s">&#39;]&#39;</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="nv">$2</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">ArrayList</span>
</span><span class='line'>  <span class="p">:</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="o">[]</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Expr</span> <span class="s">&#39;,&#39;</span> <span class="n">ArrayList</span> <span class="p">{</span> <span class="nv">$3</span><span class="o">.</span><span class="nb">unshift</span><span class="p">(</span><span class="nv">$1</span><span class="p">);</span> <span class="vg">$$</span> <span class="o">=</span> <span class="nv">$3</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">Expr</span> <span class="p">{</span> <span class="vg">$$</span> <span class="o">=</span> <span class="p">[</span><span class="nv">$1</span><span class="p">];</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">Number</span>
</span><span class='line'>  <span class="p">:</span> <span class="nb">hex</span>
</span><span class='line'>  <span class="o">|</span> <span class="nb">int</span>
</span><span class='line'>  <span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新站开张]]></title>
    <link href="http://blog.mukio.org/blog/2014/07/26/new-blog/"/>
    <updated>2014-07-26T20:20:00+08:00</updated>
    <id>http://blog.mukio.org/blog/2014/07/26/new-blog</id>
    <content type="html"><![CDATA[<p>自从百度空间改版后，便不再写过博客。过了几年，工作稳定下来了，新的博客站要开张了。</p>

<p>这次的网站搭建在自己的 vps 上，都是纯静态的页面。用的程序如页底所写：Wintersmith，是一个极简易的 nodejs 静态网站生成框架。</p>

<!-- more -->


<p>现在没有评论功能，以后我会添加的。博客内容将会是关于自己感兴趣的项目研究，开发的小程序等等。当然也会花点时间将百度空间的旧的文章迁移到这里。</p>

<p>决定使用 Wintersmith 之前，曾花了不少时间研究 Jekyll。它的功能比 Wintersmith 要丰富许多，然而因为 Jekyll 后端使用的是 Ruby 技术栈，并不很熟悉。考虑自己近期不会转用 Ruby，并且不想花太多时间在上面，最终决定使用 node.js 系的 Wintersmith。</p>

<p>css 样式用的是 Typo.css，感觉对中文排版效果会比较好。</p>
]]></content>
  </entry>
  
</feed>
